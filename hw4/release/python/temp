def ransacF(pts1, pts2, M):
    minError = 1e9
    iter_num = 1000
    threshold = 1
    M = 640
    N = pts1.shape[0]
    index = np.arange(N)
    maxInlier = np.zeros(N)
    homo_p1 = np.ones((N, 3))
    homo_p1[:,:-1] = pts1
    homo_p2 = np.ones((N, 3))
    homo_p2[:,:-1] = pts2
    #save_indices = None
    for _ in range(iter_num):
        indices = np.random.choice(index, size = 7, replace = False)
        P1 = pts1[indices,:]
        P2 = pts2[indices,:]
        Fs = sevenpoint(P1, P2, M)
        for F in Fs:
            dis = np.abs(np.sum(homo_p1[:,:] * (F @ homo_p2.T).T, axis = 1))
            inlier = dis < threshold
            if np.sum(inlier) > np.sum(maxInlier):
                maxInlier = inlier
                minError = np.sum(dis)
                #save_indices = indices
            elif np.sum(inlier) == np.sum(maxInlier) and np.sum(dis) < minError:
                maxInlier = inlier
                minError = np.sum(dis)
                #save_indices = indices
    pts1 = pts1[maxInlier,:]
    pts2 = pts2[maxInlier,:]
    refineF = eightpoint(pts1, pts2, M)
    dis = np.abs(np.sum(homo_p1[:,:] * (refineF @ homo_p2.T).T, axis = 1))
    maxInlier = dis < threshold

    print(np.sum(maxInlier))
    print(np.sum(dis))
    return refineF, maxInlier
'''

Q5.2: Rodrigues formula.
    Input:  r, a 3x1 vector
    Output: R, a rotation matrix
'''
def rodrigues(r):
    theta = np.linalg.norm(r)
    if theta == 0:
        return np.eye(3)
    else:
        k = r / theta
        K = np.array([
            [0, -k[2], k[1]],
            [k[2], 0, -k[0]],
            [-k[1], k[0], 0]
        ])
        R = np.eye(3) + np.sin(theta) * K + (1 - np.cos(theta)) * K @ K
        return R

'''
Q5.2: Inverse Rodrigues formula.
    Input:  R, a rotation matrix
    Output: r, a 3x1 vector
def invRodrigues(R):
    # Replace pass by your implementation
    tr = np.trace(R)
    
    # Calculate the angle of rotation
    theta = np.arccos((tr - 1) / 2)
    
    # Calculate the rotation vector
    v = 1 / (2 * np.sin(theta)) * np.array([R[2, 1] - R[1, 2], R[0, 2] - R[2, 0], R[1, 0] - R[0, 1]])
    
    return v
'''
def invRodrigues(R):
    tolerance = 1e-15
    A = (R - R.T)/2
    rho = np.array(A[[2, 0, 1], [1, 2, 0]])[:, None]
    s = np.float(np.linalg.norm(rho))
    c = np.float((np.trace(R) - 1)/2)
    if s < tolerance and (c - 1) < tolerance:
        r = np.array([0.0, 0.0, 0.0])[:, None]
        return r
    elif s < 1e-15 and (c + 1) < tolerance:
        # find non-zero column of R+I
        v = None
        for i in range(R.shape[-1]):
            v = (R + np.eye(3))[:, i]
            if np.count_nonzero(v) > 0:
                break
        u = v/np.linalg.norm(v)
        r = (u*np.pi)[:, None]
        if np.linalg.norm(r) == np.pi and (r[0, 0] == r[1, 0] == 0 and r[2, 0] < 0.0) or (r[0, 0] == 0 and r[1, 0] < 0) or (r[0, 0] < 0):
            return -r
        else:
            return r
    else:
        u = rho/s
        theta = np.arctan2(s, c)
        r = u*theta
        return r
'''
Q5.3: Rodrigues residual.
    Input:  K1, the intrinsics of camera 1
            M1, the extrinsics of camera 1
            p1, the 2D coordinates of points in image 1
            K2, the intrinsics of camera 2
            p2, the 2D coordinates of points in image 2
            x, the flattened concatenationg of P, r2, and t2.
    Output: residuals, 4N x 1 vector, the difference between original and estimated projections
'''
def rodriguesResidual(K1, M1, p1, K2, p2, x):
    # Replace pass by your implementation
    r2 = x[-6:-3]
    t2 = x[-3:]
    P = x[:-6].reshape(-1, 3)
    R2 = rodrigues(r2)
    M2 = np.zeros((3, 4))
    M2[:,:-1] = R2
    M2[:,-1] = t2
    C1 = K1 @ M1
    C2 = K2 @ M2
    N = P.shape[0]
    X = np.ones((N, 4))
    X[:,:-1] = P
    x1 = np.matmul(C1, X.T).T
    x1 = x1 / x1[:,-1,None]
    x2 = np.matmul(C2, X.T).T
    x2 = x2 / x2[:,-1,None]
    return np.concatenate(((p1 - x1[:,:-1]).reshape([-1]), (p2 - x2[:,:-1]).reshape([-1])))[:,None]

'''
Q5.3 Bundle adjustment.
    Input:  K1, the intrinsics of camera 1
            M1, the extrinsics of camera 1
            p1, the 2D coordinates of points in image 1
            K2,  the intrinsics of camera 2
            M2_init, the initial extrinsics of camera 1
            p2, the 2D coordinates of points in image 2
            P_init, the initial 3D coordinates of points
    Output: M2, the optimized extrinsics of camera 1
            P2, the optimized 3D coordinates of points
'''
def cost_func(x, K1, M1, p1, K2, p2):
    residual = rodriguesResidual(K1, M1, p1, K2, p2, x)
    return np.sum(residual ** 2)
'''
def bundleAdjustment(K1, M1, p1, K2, M2_init, p2, P_init):
    # Replace pass by your implementation
    F, inlier = ransacF(p1, p2, 640)
    p1 = p1[inlier,:]
    p2 = p2[inlier,:]
    P_init = P_init[inlier,:]
    x = np.concatenate((P_init.reshape([-1]), invRodrigues(M2_init[:,:-1]).reshape([-1]), M2_init[:,-1].reshape([-1])))
    #bestx, _ = leastsq(cost_func, x0 = x, args = (K1, M1, p1, K2, p2))
    func = lambda x: rodriguesResidual(K1, M1, p1, K2, p2, x)
    bestx, _ = leastsq(func, x)
    print(_)
    r2 = bestx[-6:-3]
    t2 = bestx[-3:]
    P = bestx[:-6].reshape(-1, 3)
    R2 = rodrigues(r2)
    M2 = np.zeros((3, 4))
    M2[:,:-1] = R2
    M2[:,-1] = t2
    return M2, P
'''
def bundleAdjustment(K1, M1, p1, K2, M2_init, p2, P_init):
    # Replace pass by your implementation
    x_init = P_init.flatten()
    R2 = M2_init[:, 0:3]
    t2 = M2_init[:, 3]

    r2 = invRodrigues(R2)
    x_init = np.append(x_init, r2.flatten())
    x_init = np.append(x_init, t2.flatten())

    func = lambda x: rodriguesResidual(K1, M1, p1, K2, p2, x)
    x_opt, _ = leastsq(func, x_init)

    w_opt, r2_opt, t2_opt = x_opt[:-6], x_opt[-6:-3], x_opt[-3:]
    W_opt = w_opt.reshape((w_opt.shape[0] // 3, 3))
    r2_opt = r2_opt[:, None]
    t2_opt = t2_opt[:, None]

    R2_opt = rodrigues(r2_opt)
    M2_opt = np.hstack((R2_opt, t2_opt))

    return M2_opt, W_opt